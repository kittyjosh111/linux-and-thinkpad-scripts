#!/bin/bash

## set the following strings to some identifiable string that indicates your device's orientation
device_landscape_normal="left-up"
device_left_portrait="normal"
device_right_portrait="bottom-up"
device_landscape_flipped="right-up"

## set to turn on debug messages
debug_mode=0

######################################################################
## DO NOT MODIFY BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING ##
######################################################################

## define a function that returns True when we can grep, False otherwise
grep_check () {
  if [ -z "$(echo "$1" | grep "$2")" ]; then
    return 1 #pretend this is false
  else
    return 0 #and thats true
  fi
}

## and a function that maps the DEVICE rotation to WAYDROID rotation
rot_map () {
  if grep_check "$1" "$device_landscape_normal"; then
    if [[ $debug_mode == 1 ]]; then
      echo "- Device in LANDSCAPE NORMAL orientation. Setting waydroid rotation to 0"
    fi
    waydroid shell wm set-user-rotation lock 0
  elif grep_check "$1" "$device_left_portrait"; then
    if [[ $debug_mode == 1 ]]; then
      echo "- Device in LEFT PORTRAIT orientation. Setting waydroid rotation to 1"
    fi
    waydroid shell wm set-user-rotation lock 1 
  elif grep_check "$1" "$device_landscape_flipped"; then
    if [[ $debug_mode == 1 ]]; then
      echo "- Device in LANDSCAPE FLIPPED orientation. Setting waydroid rotation to 2"
    fi
    waydroid shell wm set-user-rotation lock 2
  elif grep_check "$1" "$device_right_portrait"; then
   if [[ $debug_mode == 1 ]]; then   
     echo "- Device in RIGHT PORTRAIT orientation. Setting waydroid rotation to 3"
   fi
   waydroid shell wm set-user-rotation lock 3
  else #we should not get here!
    if [[ $debug_mode == 1 ]]; then    
      echo "[WARNING] Edge case reached in rot_map()"
    fi
    waydroid shell wm set-user-rotation lock 0
  fi
}

## now get current DEVICE rotation
starting_rotation="$(monitor-sensor --accel & monPID=$!; sleep 0.05; kill $monPID)"
rot_map "$starting_rotation" #set rotation

## now for whatever reason, we need a second monitor setup:
monitor-sensor > /tmp/kj111WaydroidRotate 2>&1 &
echo "Prerun steps completed."

## now we can run a loop to constantly run rot_map
echo "Main loop started..."
while true; do
  curr_rotation="$(monitor-sensor --accel & cmonPID=$!; sleep 0.05; kill $cmonPID)"
  rot_map "$curr_rotation"
  sleep 0.5
done
