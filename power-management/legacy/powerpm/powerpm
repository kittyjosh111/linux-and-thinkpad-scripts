#!/bin/bash
# Script that applies automatic power management.

## Variables: (change as needed)
# change ACOFF to the script you want to run when AC is not connected. Keep entire command in quotations
ACOFF="tuned-adm profile powersave"
# change ACON to the script you want to run when AC is connected. Keep entire command in quotations
ACON="tuned-adm profile throughput-performance"
# value to enable toggling turbo boost as well. 0 is disabled, 1 is enabled. Default is disabled (0)
#    if enabled, turbo boost is turned on when connected to power, and turned off when disconnected
TURBO=0
# value to enable dynamic-profiler as well. 0 is disabled, 1 is enabled. Default is disabled (0)
#    if enabled, the above functionality of TURBO will be overwritten.
#    the behavior of dynamic-profiler is that when connected to AC power, the script will poll
#    your system load and turn on turbo boost accordingly. When not connected to power,
#    this check is turned off and turbo boost status is left up to either TURBO or your power management backend.
DYNAMIC_PROFILER=0
# change USERNAME if needed manually. This attempts to automatically determine your username
#    your username is needed to run commands as a user, which is implemented to make notify-send work
#    thus, if notify-send doesnt send anything, try manually setting USERNAME to your username
USERNAME=$(who | grep "\(${_display_id}\)" | awk '{print $1}' | head -n 1)
#USERNAME=

######################################################################
## DO NOT MODIFY BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING ##
######################################################################

## Functions:
function runas() {
    ### This function is meant for sudo to run commands on behalf of USERNAME, concerning GUI applications like gsettings or notify-send ###
    ### Adapted from https://stackoverflow.com/questions/20292578/setting-gsettings-of-other-user-with-sudo ###
    display_id=":$(ls /tmp/.X11-unix/ | sort | head -n 1 | cut -c 2-)"
    user_id=$(id -u "$USERNAME")
    environment=("DISPLAY=$display_id" "DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$user_id/bus")
    sudo -Hu "$USERNAME" env "${environment[@]}" "$@" #run as sudo
}

function checker() {
    ### This function checks pmtoggle to see whether the system is connected to power ###
    ### I used to have this not be a bunch of if statements, but it would work inconsistently for some reaons ###
    if [ ! -z "$(tail -n2 /tmp/pmtoggle | grep '0')" ]; then #AC not attached
        runas notify-send --transient "Power Management" "AC disconnected. Applying changes."
        $ACOFF
        if ! [[ -z "$(ls /usr/bin/*-session | grep gnome)" ]]; then #check if we are on gnome
            echo "> Running on gnome..." #if yes, run toggler with additional gsettings args to toggle animations
            runas gsettings set org.gnome.desktop.interface enable-animations false
        fi
        if [ $DYNAMIC_PROFILER -eq 1 ]; then
            systemctl stop dynamic-profiler.service
            systemctl restart dynamic-profiler-batt.service
        fi
        if [[ "$TURBO" == "1" ]]; then
            echo '1' | tee /sys/devices/system/cpu/intel_pstate/no_turbo > /dev/null #turn off turbo boost
        fi
        echo "> AC not attached. Applying changes..."
    else #AC attached
        runas notify-send --transient "Power Management" "AC connected. Applying changes."
        $ACON
        if ! [[ -z "$(ls /usr/bin/*-session | grep gnome)" ]]; then #check if we are on gnome
            echo "> Running on gnome..." #if yes, run toggler with additional gsettings args to toggle animations
            runas gsettings set org.gnome.desktop.interface enable-animations true
        fi
        if [[ "$TURBO" == "1" ]] && [ $DYNAMIC_PROFILER -ne 1 ]; then
            echo '0' | tee /sys/devices/system/cpu/intel_pstate/no_turbo > /dev/null #turn on turbo boost, else let dynamic profiler work
        fi
        if [ $DYNAMIC_PROFILER -eq 1 ]; then
            systemctl stop dynamic-profiler-batt.service
            systemctl restart dynamic-profiler.service
        fi
        echo "> AC attached. Applying changes..."
    fi
}

function toggler() {
    ### Function to run CHECKER and monitor PMTOGGLE through inexpensive polling ###
    checker #run once first in case
    inotifywait --monitor --format "%e %w%f" --event modify,create /tmp/pmtoggle | while read changed; do
        checker
    done
}

## Main flow:
# When running toggler with positional args, alternate between commands to run with AC Off, then AC On, then AC Off, etc.
pmtoggle # If this be first boot, run pmtoggle manually
sleep 1
toggler
