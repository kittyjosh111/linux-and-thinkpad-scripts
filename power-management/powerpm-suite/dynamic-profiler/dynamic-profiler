#!/bin/bash
######################################################################
## DO NOT MODIFY BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING ##
######################################################################
USER_CONFIG="$1"
if [ ! -z "$USER_CONFIG" ]; then
  echo "User config file passed. Using config file at $USER_CONFIG"
  if [ -f "$USER_CONFIG" ]; then
    . "$USER_CONFIG"
  else
    echo "Config file not found. Exiting..."
    exit 1
  fi
else
  echo "Using default config file at /etc/dynamic-profiler.conf"
  . /etc/dynamic-profiler.conf
fi

# Script to automatically change power management settings based on system usage.
rm /tmp/dynamic-profiler

#precheck tmp file
if ! [ -f /tmp/dynamic-profiler ]; then #create a tmp file
  echo "No tmp file found. Creating as /tmp/dynamic-profiler..."
  touch /tmp/dynamic-profiler > /dev/null
fi

#define functions
check_tmp () {
  if [[ $(cat /tmp/dynamic-profiler) == "$1" ]]; then
    return 1
  fi
}

turbo_set () {
  cpu_check="$(echo "$1 > $TURBO_CPU_THRESHOLD" | bc -l)"
  turbo=$(cat /sys/devices/system/cpu/intel_pstate/no_turbo)
  if [ $cpu_check -eq 1 ]; then
    if [ $turbo == "1" ]; then
      echo "0" | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo > /dev/null #turn on boost
    fi
  else
    if [ $turbo == "0" ]; then
      echo "1" | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo > /dev/null #turn off boost
    fi
  fi
  turbo=$(cat /sys/devices/system/cpu/intel_pstate/no_turbo) #redefine it for debugger
}

performance_set () {
  check_tmp "performance"
  check_ret=$?
  if [[ $check_ret != 1 ]]; then
    $PERFORMANCE
    echo "Performance Mode set!"
    echo "performance" | tee /tmp/dynamic-profiler > /dev/null
  fi
}

balanced_set () {
  check_tmp "balanced"
  check_ret=$?
  if [[ $check_ret != 1 ]]; then
    $BALANCED
    echo "Balanced Mode set!"
    echo "balanced" | tee /tmp/dynamic-profiler > /dev/null
  fi
}

power_set () {
  check_tmp "power"
  check_ret=$?
  if [[ $check_ret != 1 ]]; then
    $POWER
    echo "Power Mode set!"
    echo "power" | tee /tmp/dynamic-profiler > /dev/null
  fi
}

debug_log () {
  if [[ $DEBUG_LOG == 1 ]]; then
    echo "LOAD DELTA: $int_load_diff, CPU: $cpu, NO_TURBO: $turbo, POWER_LEVEL: $POWER_LEVEL"
  fi
}

profile_set () {
  if [[ "$1" -le 0 ]]; then
    POWER_LEVEL=0
    power_set
  elif [[ "$1" -ge 2 ]]; then
    POWER_LEVEL=2
    performance_set
  else
    balanced_set
  fi
}

## Main loop
POWER_LEVEL=1 #0 for powersave, +1 to balanced, +1 to perf
IS_LOCKED=0 #0 for no, 1 for yes
PMTOGGLE=5 #sorry, habit from zscripting
while true
do
  if [[ $(cat /tmp/pmtoggle) == "1" ]]; then
      if [[ "$PMTOGGLE" != 1 ]]; then
        echo "Connected to AC. Switching to AC mode."
        PMTOGGLE=1
        echo "reset" | tee /tmp/dynamic-profiler > /dev/null
      fi
      PERFORMANCE="$AC_PERFORMANCE"
      BALANCED="$AC_BALANCED"
      POWER="$AC_POWER"
      TURBO_CPU_THRESHOLD="$AC_TURBO_CPU_THRESHOLD"
      LOAD_DELTA_THRESHOLD="$AC_LOAD_DELTA_THRESHOLD"
      LOWER_CPU_THRESHOLD="$AC_LOWER_CPU_THRESHOLD"
      HIGHER_CPU_THRESHOLD="$AC_HIGHER_CPU_THRESHOLD"
  else
      if [[ "$PMTOGGLE" != "0" ]]; then
        echo "Disconnected from AC. Switching to battery mode."
        PMTOGGLE=0
        echo "reset" | tee /tmp/dynamic-profiler > /dev/null
      fi
      PERFORMANCE="$BAT_PERFORMANCE"
      BALANCED="$BAT_BALANCED"
      POWER="$BAT_POWER"
      TURBO_CPU_THRESHOLD="$BAT_TURBO_CPU_THRESHOLD"
      LOAD_DELTA_THRESHOLD="$BAT_LOAD_DELTA_THRESHOLD"
      LOWER_CPU_THRESHOLD="$BAT_LOWER_CPU_THRESHOLD"
      HIGHER_CPU_THRESHOLD="$BAT_HIGHER_CPU_THRESHOLD"
  fi
  if [ -f /tmp/dynamic-profiler-lock ]; then
    if [[ "$IS_LOCKED" != "1" ]]; then
      old_mode="$(cat /tmp/dynamic-profiler)"
      echo "Lock file found. Waiting for manual instruction."
      echo "locked" | tee /tmp/dynamic-profiler > /dev/null
      IS_LOCKED=1
    fi
    if [ -f /tmp/dynamic-profiler-turbo-on ]; then
      echo "0" | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo > /dev/null
      echo "Turbo Mode enabled manually"
      rm /tmp/dynamic-profiler-turbo-on > /dev/null
      echo "$old_mode" | tee /tmp/dynamic-profiler > /dev/null
    elif [ -f /tmp/dynamic-profiler-turbo-off ]; then
      echo "1" | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo > /dev/null
      echo "Turbo Mode disabled manually"
      rm /tmp/dynamic-profiler-turbo-off > /dev/null
      echo "$old_mode" | tee /tmp/dynamic-profiler > /dev/null
    fi
    if [ -f /tmp/dynamic-profiler-manual ]; then
      man_sett=$(cat /tmp/dynamic-profiler-manual)
      if [[ $man_sett == "performance" ]]; then
        $PERFORMANCE
        echo "Performance Mode set manually."
      elif [[ $man_sett == "balanced" ]]; then
        $BALANCED
        echo "Balanced Mode set manually."
      elif [[ $man_sett == "power" ]]; then
        $POWER
        echo "Power Mode set manually."
      else
        echo "Unknown manual mode. No action taken."
      fi
      rm /tmp/dynamic-profiler-manual > /dev/null
      echo "$man_sett" | tee /tmp/dynamic-profiler > /dev/null
    fi
    sleep $POLL_INTERVAL
  else
    if [[ "$IS_LOCKED" == "1" ]]; then
      echo "Lock file removed. Resuming automatic management."
      IS_LOCKED=0
    fi
    #Get CPU info
    top_get="$(top -bn1 | grep -o -e 'load average.*' -e 'Cpu(s).*')"
    cpu="$(echo "$top_get" | tail -n 1 | awk '{ print $2 '+' $4; }' | bc)"
    int_cpu=$(printf "%.*f\n" 0 $cpu) #simplify calculations later on
    #Get Load difference info
    load_1="$(echo $(uptime) | grep -o -e 'load average.*' | awk '{print $3;}' | tr ',' ' ')"
    sleep $POLL_INTERVAL #gather data
    load_2="$(echo $(uptime) | grep -o -e 'load average.*' | awk '{print $3;}' | tr ',' ' ')"
    load_diff="$(echo $load_2 - $load_1 | bc)"
    load_diff_100=$(echo "$load_diff*100" | bc) #its easier to get an int for bash calculations
    int_load_diff=$(printf "%.*f\n" 0 $load_diff_100) #conversion to int
    load_delta_100=$(echo "$LOAD_DELTA_THRESHOLD*100" | bc) #make sure scale is the same
    int_load_delta=$(printf "%.*f\n" 0 $load_delta_100) #conversion to int

    if [[ $int_load_diff -le $int_load_delta ]] && [[ $int_cpu -le $LOWER_CPU_THRESHOLD ]]; then
      POWER_LEVEL=$(($POWER_LEVEL - 1)) #move up a level if load is too large BUT cpu threshold isn't met
    elif [[ $int_load_diff -le $int_load_delta ]]; then
      true #LMAO, just stay in place if load is less than trigger and CPU usage is doing something
    elif [[ $int_load_diff -gt $int_load_delta ]] && [[ $int_cpu -ge $HIGHER_CPU_THRESHOLD ]]; then
      POWER_LEVEL=$(($POWER_LEVEL + 2)) #instantly jump to performance mode, as the CPU is going ham AND the load is up
    elif [[ $int_load_diff -gt $int_load_delta ]]; then
      POWER_LEVEL=$(($POWER_LEVEL + 1)) #but only move up one if load is going up but CPU isn't doing too much
    else
      true #something unexpected, just stay in place
    fi
    profile_set $POWER_LEVEL
    turbo_set $int_cpu
    debug_log
  fi
done

